/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChallengeRootService } from "../challengeRoot.service";
import { ChallengeRootCreateInput } from "./ChallengeRootCreateInput";
import { ChallengeRoot } from "./ChallengeRoot";
import { ChallengeRootFindManyArgs } from "./ChallengeRootFindManyArgs";
import { ChallengeRootWhereUniqueInput } from "./ChallengeRootWhereUniqueInput";
import { ChallengeRootUpdateInput } from "./ChallengeRootUpdateInput";
import { RootFindManyArgs } from "../../root/base/RootFindManyArgs";
import { Root } from "../../root/base/Root";
import { RootWhereUniqueInput } from "../../root/base/RootWhereUniqueInput";

export class ChallengeRootControllerBase {
  constructor(protected readonly service: ChallengeRootService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChallengeRoot })
  async createChallengeRoot(
    @common.Body() data: ChallengeRootCreateInput
  ): Promise<ChallengeRoot> {
    return await this.service.createChallengeRoot({
      data: data,
      select: {
        currentCount: true,
        description: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        targetCount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChallengeRoot] })
  @ApiNestedQuery(ChallengeRootFindManyArgs)
  async challengeRoots(
    @common.Req() request: Request
  ): Promise<ChallengeRoot[]> {
    const args = plainToClass(ChallengeRootFindManyArgs, request.query);
    return this.service.challengeRoots({
      ...args,
      select: {
        currentCount: true,
        description: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        targetCount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChallengeRoot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async challengeRoot(
    @common.Param() params: ChallengeRootWhereUniqueInput
  ): Promise<ChallengeRoot | null> {
    const result = await this.service.challengeRoot({
      where: params,
      select: {
        currentCount: true,
        description: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        targetCount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChallengeRoot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChallengeRoot(
    @common.Param() params: ChallengeRootWhereUniqueInput,
    @common.Body() data: ChallengeRootUpdateInput
  ): Promise<ChallengeRoot | null> {
    try {
      return await this.service.updateChallengeRoot({
        where: params,
        data: data,
        select: {
          currentCount: true,
          description: true,
          endDate: true,
          id: true,
          name: true,
          startDate: true,
          targetCount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChallengeRoot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChallengeRoot(
    @common.Param() params: ChallengeRootWhereUniqueInput
  ): Promise<ChallengeRoot | null> {
    try {
      return await this.service.deleteChallengeRoot({
        where: params,
        select: {
          currentCount: true,
          description: true,
          endDate: true,
          id: true,
          name: true,
          startDate: true,
          targetCount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/roots")
  @ApiNestedQuery(RootFindManyArgs)
  async findRoots(
    @common.Req() request: Request,
    @common.Param() params: ChallengeRootWhereUniqueInput
  ): Promise<Root[]> {
    const query = plainToClass(RootFindManyArgs, request.query);
    const results = await this.service.findRoots(params.id, {
      ...query,
      select: {
        challenge: {
          select: {
            id: true,
          },
        },

        classicalOrigin: true,
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        id: true,
        isCompleted: true,
        notes: true,
        rootLetters: true,
        status: true,
        transliteration: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/roots")
  async connectRoots(
    @common.Param() params: ChallengeRootWhereUniqueInput,
    @common.Body() body: RootWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roots: {
        connect: body,
      },
    };
    await this.service.updateChallengeRoot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/roots")
  async updateRoots(
    @common.Param() params: ChallengeRootWhereUniqueInput,
    @common.Body() body: RootWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roots: {
        set: body,
      },
    };
    await this.service.updateChallengeRoot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/roots")
  async disconnectRoots(
    @common.Param() params: ChallengeRootWhereUniqueInput,
    @common.Body() body: RootWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roots: {
        disconnect: body,
      },
    };
    await this.service.updateChallengeRoot({
      where: params,
      data,
      select: { id: true },
    });
  }
}
