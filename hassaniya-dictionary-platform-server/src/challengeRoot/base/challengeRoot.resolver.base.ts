/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChallengeRoot } from "./ChallengeRoot";
import { ChallengeRootCountArgs } from "./ChallengeRootCountArgs";
import { ChallengeRootFindManyArgs } from "./ChallengeRootFindManyArgs";
import { ChallengeRootFindUniqueArgs } from "./ChallengeRootFindUniqueArgs";
import { CreateChallengeRootArgs } from "./CreateChallengeRootArgs";
import { UpdateChallengeRootArgs } from "./UpdateChallengeRootArgs";
import { DeleteChallengeRootArgs } from "./DeleteChallengeRootArgs";
import { RootFindManyArgs } from "../../root/base/RootFindManyArgs";
import { Root } from "../../root/base/Root";
import { ChallengeRootService } from "../challengeRoot.service";
@graphql.Resolver(() => ChallengeRoot)
export class ChallengeRootResolverBase {
  constructor(protected readonly service: ChallengeRootService) {}

  async _challengeRootsMeta(
    @graphql.Args() args: ChallengeRootCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChallengeRoot])
  async challengeRoots(
    @graphql.Args() args: ChallengeRootFindManyArgs
  ): Promise<ChallengeRoot[]> {
    return this.service.challengeRoots(args);
  }

  @graphql.Query(() => ChallengeRoot, { nullable: true })
  async challengeRoot(
    @graphql.Args() args: ChallengeRootFindUniqueArgs
  ): Promise<ChallengeRoot | null> {
    const result = await this.service.challengeRoot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChallengeRoot)
  async createChallengeRoot(
    @graphql.Args() args: CreateChallengeRootArgs
  ): Promise<ChallengeRoot> {
    return await this.service.createChallengeRoot({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ChallengeRoot)
  async updateChallengeRoot(
    @graphql.Args() args: UpdateChallengeRootArgs
  ): Promise<ChallengeRoot | null> {
    try {
      return await this.service.updateChallengeRoot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChallengeRoot)
  async deleteChallengeRoot(
    @graphql.Args() args: DeleteChallengeRootArgs
  ): Promise<ChallengeRoot | null> {
    try {
      return await this.service.deleteChallengeRoot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Root], { name: "roots" })
  async findRoots(
    @graphql.Parent() parent: ChallengeRoot,
    @graphql.Args() args: RootFindManyArgs
  ): Promise<Root[]> {
    const results = await this.service.findRoots(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
