/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ChallengeRoot as PrismaChallengeRoot,
  Root as PrismaRoot,
} from "@prisma/client";

export class ChallengeRootServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChallengeRootCountArgs, "select">
  ): Promise<number> {
    return this.prisma.challengeRoot.count(args);
  }

  async challengeRoots(
    args: Prisma.ChallengeRootFindManyArgs
  ): Promise<PrismaChallengeRoot[]> {
    return this.prisma.challengeRoot.findMany(args);
  }
  async challengeRoot(
    args: Prisma.ChallengeRootFindUniqueArgs
  ): Promise<PrismaChallengeRoot | null> {
    return this.prisma.challengeRoot.findUnique(args);
  }
  async createChallengeRoot(
    args: Prisma.ChallengeRootCreateArgs
  ): Promise<PrismaChallengeRoot> {
    return this.prisma.challengeRoot.create(args);
  }
  async updateChallengeRoot(
    args: Prisma.ChallengeRootUpdateArgs
  ): Promise<PrismaChallengeRoot> {
    return this.prisma.challengeRoot.update(args);
  }
  async deleteChallengeRoot(
    args: Prisma.ChallengeRootDeleteArgs
  ): Promise<PrismaChallengeRoot> {
    return this.prisma.challengeRoot.delete(args);
  }

  async findRoots(
    parentId: number,
    args: Prisma.RootFindManyArgs
  ): Promise<PrismaRoot[]> {
    return this.prisma.challengeRoot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .roots(args);
  }
}
