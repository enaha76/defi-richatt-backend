/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ActivityCreateNestedManyWithoutUsersInput } from "./ActivityCreateNestedManyWithoutUsersInput";

import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsBoolean,
  IsDate,
  IsInt,
  Max,
} from "class-validator";

import { Type } from "class-transformer";
import { DictionaryEntryCreateNestedManyWithoutUsersInput } from "./DictionaryEntryCreateNestedManyWithoutUsersInput";
import { AuditLogCreateNestedManyWithoutUsersInput } from "./AuditLogCreateNestedManyWithoutUsersInput";
import { CommentCreateNestedManyWithoutUsersInput } from "./CommentCreateNestedManyWithoutUsersInput";
import { DefinitionCreateNestedManyWithoutUsersInput } from "./DefinitionCreateNestedManyWithoutUsersInput";
import { ExampleCreateNestedManyWithoutUsersInput } from "./ExampleCreateNestedManyWithoutUsersInput";
import { RootCreateNestedManyWithoutUsersInput } from "./RootCreateNestedManyWithoutUsersInput";
import { AiSuggestionCreateNestedManyWithoutUsersInput } from "./AiSuggestionCreateNestedManyWithoutUsersInput";
import { SubmissionCreateNestedManyWithoutUsersInput } from "./SubmissionCreateNestedManyWithoutUsersInput";
import { DocumentCreateNestedManyWithoutUsersInput } from "./DocumentCreateNestedManyWithoutUsersInput";
import { UserBadgeCreateNestedManyWithoutUsersInput } from "./UserBadgeCreateNestedManyWithoutUsersInput";
import { UserRoleCreateNestedManyWithoutUsersInput } from "./UserRoleCreateNestedManyWithoutUsersInput";

@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: () => ActivityCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ActivityCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ActivityCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  activities?: ActivityCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => DictionaryEntryCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => DictionaryEntryCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => DictionaryEntryCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  approvedEntries?: DictionaryEntryCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => AuditLogCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => AuditLogCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => AuditLogCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  auditLogs?: AuditLogCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => CommentCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => CommentCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => CommentCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  comments?: CommentCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => DefinitionCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => DefinitionCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => DefinitionCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  createdDefinitions?: DefinitionCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => DictionaryEntryCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => DictionaryEntryCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => DictionaryEntryCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  createdEntries?: DictionaryEntryCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ExampleCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ExampleCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ExampleCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  createdExamples?: ExampleCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => RootCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => RootCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => RootCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  createdRoots?: RootCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => DictionaryEntryCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => DictionaryEntryCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => DictionaryEntryCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  editedEntries?: DictionaryEntryCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fullName?: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  languageProficiency?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  lastLogin?: Date | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  level!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  passwordHash!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  points!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileImage?: string | null;

  @ApiProperty({
    required: false,
    type: () => AiSuggestionCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => AiSuggestionCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => AiSuggestionCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  reviewedSuggestions?: AiSuggestionCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SubmissionCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SubmissionCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SubmissionCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  reviews?: SubmissionCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SubmissionCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SubmissionCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SubmissionCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  submissions?: SubmissionCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => DocumentCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => DocumentCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => DocumentCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  uploadedDocuments?: DocumentCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => UserBadgeCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => UserBadgeCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => UserBadgeCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  userBadges?: UserBadgeCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => UserRoleCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => UserRoleCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => UserRoleCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  userRoles?: UserRoleCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  username!: string;
}

export { UserCreateInput as UserCreateInput };
