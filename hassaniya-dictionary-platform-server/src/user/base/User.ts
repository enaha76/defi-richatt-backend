/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Activity } from "../../activity/base/Activity";

import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
  IsInt,
  IsBoolean,
  Max,
} from "class-validator";

import { Type } from "class-transformer";
import { DictionaryEntry } from "../../dictionaryEntry/base/DictionaryEntry";
import { AuditLog } from "../../auditLog/base/AuditLog";
import { Comment } from "../../comment/base/Comment";
import { Definition } from "../../definition/base/Definition";
import { Example } from "../../example/base/Example";
import { Root } from "../../root/base/Root";
import { AiSuggestion } from "../../aiSuggestion/base/AiSuggestion";
import { Submission } from "../../submission/base/Submission";
import { Document } from "../../document/base/Document";
import { UserBadge } from "../../userBadge/base/UserBadge";
import { UserRole } from "../../userRole/base/UserRole";

@ObjectType()
class User {
  @ApiProperty({
    required: false,
    type: () => [Activity],
  })
  @ValidateNested()
  @Type(() => Activity)
  @IsOptional()
  activities?: Array<Activity>;

  @ApiProperty({
    required: false,
    type: () => [DictionaryEntry],
  })
  @ValidateNested()
  @Type(() => DictionaryEntry)
  @IsOptional()
  approvedEntries?: Array<DictionaryEntry>;

  @ApiProperty({
    required: false,
    type: () => [AuditLog],
  })
  @ValidateNested()
  @Type(() => AuditLog)
  @IsOptional()
  auditLogs?: Array<AuditLog>;

  @ApiProperty({
    required: false,
    type: () => [Comment],
  })
  @ValidateNested()
  @Type(() => Comment)
  @IsOptional()
  comments?: Array<Comment>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Definition],
  })
  @ValidateNested()
  @Type(() => Definition)
  @IsOptional()
  createdDefinitions?: Array<Definition>;

  @ApiProperty({
    required: false,
    type: () => [DictionaryEntry],
  })
  @ValidateNested()
  @Type(() => DictionaryEntry)
  @IsOptional()
  createdEntries?: Array<DictionaryEntry>;

  @ApiProperty({
    required: false,
    type: () => [Example],
  })
  @ValidateNested()
  @Type(() => Example)
  @IsOptional()
  createdExamples?: Array<Example>;

  @ApiProperty({
    required: false,
    type: () => [Root],
  })
  @ValidateNested()
  @Type(() => Root)
  @IsOptional()
  createdRoots?: Array<Root>;

  @ApiProperty({
    required: false,
    type: () => [DictionaryEntry],
  })
  @ValidateNested()
  @Type(() => DictionaryEntry)
  @IsOptional()
  editedEntries?: Array<DictionaryEntry>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fullName!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  languageProficiency!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  lastLogin!: Date | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  level!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  passwordHash!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  points!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileImage!: string | null;

  @ApiProperty({
    required: false,
    type: () => [AiSuggestion],
  })
  @ValidateNested()
  @Type(() => AiSuggestion)
  @IsOptional()
  reviewedSuggestions?: Array<AiSuggestion>;

  @ApiProperty({
    required: false,
    type: () => [Submission],
  })
  @ValidateNested()
  @Type(() => Submission)
  @IsOptional()
  reviews?: Array<Submission>;

  @ApiProperty({
    required: false,
    type: () => [Submission],
  })
  @ValidateNested()
  @Type(() => Submission)
  @IsOptional()
  submissions?: Array<Submission>;

  @ApiProperty({
    required: false,
    type: () => [Document],
  })
  @ValidateNested()
  @Type(() => Document)
  @IsOptional()
  uploadedDocuments?: Array<Document>;

  @ApiProperty({
    required: false,
    type: () => [UserBadge],
  })
  @ValidateNested()
  @Type(() => UserBadge)
  @IsOptional()
  userBadges?: Array<UserBadge>;

  @ApiProperty({
    required: false,
    type: () => [UserRole],
  })
  @ValidateNested()
  @Type(() => UserRole)
  @IsOptional()
  userRoles?: Array<UserRole>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  username!: string;
}

export { User as User };
