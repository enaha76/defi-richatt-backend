/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  Activity as PrismaActivity,
  DictionaryEntry as PrismaDictionaryEntry,
  AuditLog as PrismaAuditLog,
  Comment as PrismaComment,
  Definition as PrismaDefinition,
  Example as PrismaExample,
  Root as PrismaRoot,
  AiSuggestion as PrismaAiSuggestion,
  Submission as PrismaSubmission,
  Document as PrismaDocument,
  UserBadge as PrismaUserBadge,
  UserRole as PrismaUserRole,
} from "@prisma/client";

export class UserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create(args);
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update(args);
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findActivities(
    parentId: number,
    args: Prisma.ActivityFindManyArgs
  ): Promise<PrismaActivity[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activities(args);
  }

  async findApprovedEntries(
    parentId: number,
    args: Prisma.DictionaryEntryFindManyArgs
  ): Promise<PrismaDictionaryEntry[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .approvedEntries(args);
  }

  async findAuditLogs(
    parentId: number,
    args: Prisma.AuditLogFindManyArgs
  ): Promise<PrismaAuditLog[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .auditLogs(args);
  }

  async findComments(
    parentId: number,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findCreatedDefinitions(
    parentId: number,
    args: Prisma.DefinitionFindManyArgs
  ): Promise<PrismaDefinition[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .createdDefinitions(args);
  }

  async findCreatedEntries(
    parentId: number,
    args: Prisma.DictionaryEntryFindManyArgs
  ): Promise<PrismaDictionaryEntry[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .createdEntries(args);
  }

  async findCreatedExamples(
    parentId: number,
    args: Prisma.ExampleFindManyArgs
  ): Promise<PrismaExample[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .createdExamples(args);
  }

  async findCreatedRoots(
    parentId: number,
    args: Prisma.RootFindManyArgs
  ): Promise<PrismaRoot[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .createdRoots(args);
  }

  async findEditedEntries(
    parentId: number,
    args: Prisma.DictionaryEntryFindManyArgs
  ): Promise<PrismaDictionaryEntry[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .editedEntries(args);
  }

  async findReviewedSuggestions(
    parentId: number,
    args: Prisma.AiSuggestionFindManyArgs
  ): Promise<PrismaAiSuggestion[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviewedSuggestions(args);
  }

  async findReviews(
    parentId: number,
    args: Prisma.SubmissionFindManyArgs
  ): Promise<PrismaSubmission[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async findSubmissions(
    parentId: number,
    args: Prisma.SubmissionFindManyArgs
  ): Promise<PrismaSubmission[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .submissions(args);
  }

  async findUploadedDocuments(
    parentId: number,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .uploadedDocuments(args);
  }

  async findUserBadges(
    parentId: number,
    args: Prisma.UserBadgeFindManyArgs
  ): Promise<PrismaUserBadge[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userBadges(args);
  }

  async findUserRoles(
    parentId: number,
    args: Prisma.UserRoleFindManyArgs
  ): Promise<PrismaUserRole[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userRoles(args);
  }
}
