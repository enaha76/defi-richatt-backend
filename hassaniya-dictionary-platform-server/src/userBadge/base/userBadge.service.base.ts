/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserBadge as PrismaUserBadge,
  Badge as PrismaBadge,
  User as PrismaUser,
} from "@prisma/client";

export class UserBadgeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserBadgeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userBadge.count(args);
  }

  async userBadges(
    args: Prisma.UserBadgeFindManyArgs
  ): Promise<PrismaUserBadge[]> {
    return this.prisma.userBadge.findMany(args);
  }
  async userBadge(
    args: Prisma.UserBadgeFindUniqueArgs
  ): Promise<PrismaUserBadge | null> {
    return this.prisma.userBadge.findUnique(args);
  }
  async createUserBadge(
    args: Prisma.UserBadgeCreateArgs
  ): Promise<PrismaUserBadge> {
    return this.prisma.userBadge.create(args);
  }
  async updateUserBadge(
    args: Prisma.UserBadgeUpdateArgs
  ): Promise<PrismaUserBadge> {
    return this.prisma.userBadge.update(args);
  }
  async deleteUserBadge(
    args: Prisma.UserBadgeDeleteArgs
  ): Promise<PrismaUserBadge> {
    return this.prisma.userBadge.delete(args);
  }

  async getBadge(parentId: number): Promise<PrismaBadge | null> {
    return this.prisma.userBadge
      .findUnique({
        where: { id: parentId },
      })
      .badge();
  }

  async getUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.userBadge
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
