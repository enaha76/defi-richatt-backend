/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiSuggestion } from "./AiSuggestion";
import { AiSuggestionCountArgs } from "./AiSuggestionCountArgs";
import { AiSuggestionFindManyArgs } from "./AiSuggestionFindManyArgs";
import { AiSuggestionFindUniqueArgs } from "./AiSuggestionFindUniqueArgs";
import { CreateAiSuggestionArgs } from "./CreateAiSuggestionArgs";
import { UpdateAiSuggestionArgs } from "./UpdateAiSuggestionArgs";
import { DeleteAiSuggestionArgs } from "./DeleteAiSuggestionArgs";
import { DictionaryEntry } from "../../dictionaryEntry/base/DictionaryEntry";
import { User } from "../../user/base/User";
import { Root } from "../../root/base/Root";
import { AiSuggestionService } from "../aiSuggestion.service";
@graphql.Resolver(() => AiSuggestion)
export class AiSuggestionResolverBase {
  constructor(protected readonly service: AiSuggestionService) {}

  async _aiSuggestionsMeta(
    @graphql.Args() args: AiSuggestionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiSuggestion])
  async aiSuggestions(
    @graphql.Args() args: AiSuggestionFindManyArgs
  ): Promise<AiSuggestion[]> {
    return this.service.aiSuggestions(args);
  }

  @graphql.Query(() => AiSuggestion, { nullable: true })
  async aiSuggestion(
    @graphql.Args() args: AiSuggestionFindUniqueArgs
  ): Promise<AiSuggestion | null> {
    const result = await this.service.aiSuggestion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiSuggestion)
  async createAiSuggestion(
    @graphql.Args() args: CreateAiSuggestionArgs
  ): Promise<AiSuggestion> {
    return await this.service.createAiSuggestion({
      ...args,
      data: {
        ...args.data,

        entry: args.data.entry
          ? {
              connect: args.data.entry,
            }
          : undefined,

        reviewer: args.data.reviewer
          ? {
              connect: args.data.reviewer,
            }
          : undefined,

        root: args.data.root
          ? {
              connect: args.data.root,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AiSuggestion)
  async updateAiSuggestion(
    @graphql.Args() args: UpdateAiSuggestionArgs
  ): Promise<AiSuggestion | null> {
    try {
      return await this.service.updateAiSuggestion({
        ...args,
        data: {
          ...args.data,

          entry: args.data.entry
            ? {
                connect: args.data.entry,
              }
            : undefined,

          reviewer: args.data.reviewer
            ? {
                connect: args.data.reviewer,
              }
            : undefined,

          root: args.data.root
            ? {
                connect: args.data.root,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiSuggestion)
  async deleteAiSuggestion(
    @graphql.Args() args: DeleteAiSuggestionArgs
  ): Promise<AiSuggestion | null> {
    try {
      return await this.service.deleteAiSuggestion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DictionaryEntry, {
    nullable: true,
    name: "entry",
  })
  async getEntry(
    @graphql.Parent() parent: AiSuggestion
  ): Promise<DictionaryEntry | null> {
    const result = await this.service.getEntry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "reviewer",
  })
  async getReviewer(
    @graphql.Parent() parent: AiSuggestion
  ): Promise<User | null> {
    const result = await this.service.getReviewer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Root, {
    nullable: true,
    name: "root",
  })
  async getRoot(@graphql.Parent() parent: AiSuggestion): Promise<Root | null> {
    const result = await this.service.getRoot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
