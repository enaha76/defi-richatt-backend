/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AiSuggestion as PrismaAiSuggestion,
  DictionaryEntry as PrismaDictionaryEntry,
  User as PrismaUser,
  Root as PrismaRoot,
} from "@prisma/client";

export class AiSuggestionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiSuggestionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiSuggestion.count(args);
  }

  async aiSuggestions(
    args: Prisma.AiSuggestionFindManyArgs
  ): Promise<PrismaAiSuggestion[]> {
    return this.prisma.aiSuggestion.findMany(args);
  }
  async aiSuggestion(
    args: Prisma.AiSuggestionFindUniqueArgs
  ): Promise<PrismaAiSuggestion | null> {
    return this.prisma.aiSuggestion.findUnique(args);
  }
  async createAiSuggestion(
    args: Prisma.AiSuggestionCreateArgs
  ): Promise<PrismaAiSuggestion> {
    return this.prisma.aiSuggestion.create(args);
  }
  async updateAiSuggestion(
    args: Prisma.AiSuggestionUpdateArgs
  ): Promise<PrismaAiSuggestion> {
    return this.prisma.aiSuggestion.update(args);
  }
  async deleteAiSuggestion(
    args: Prisma.AiSuggestionDeleteArgs
  ): Promise<PrismaAiSuggestion> {
    return this.prisma.aiSuggestion.delete(args);
  }

  async getEntry(parentId: number): Promise<PrismaDictionaryEntry | null> {
    return this.prisma.aiSuggestion
      .findUnique({
        where: { id: parentId },
      })
      .entry();
  }

  async getReviewer(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.aiSuggestion
      .findUnique({
        where: { id: parentId },
      })
      .reviewer();
  }

  async getRoot(parentId: number): Promise<PrismaRoot | null> {
    return this.prisma.aiSuggestion
      .findUnique({
        where: { id: parentId },
      })
      .root();
  }
}
