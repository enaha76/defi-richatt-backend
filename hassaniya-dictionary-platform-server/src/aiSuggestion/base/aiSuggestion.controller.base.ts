/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AiSuggestionService } from "../aiSuggestion.service";
import { AiSuggestionCreateInput } from "./AiSuggestionCreateInput";
import { AiSuggestion } from "./AiSuggestion";
import { AiSuggestionFindManyArgs } from "./AiSuggestionFindManyArgs";
import { AiSuggestionWhereUniqueInput } from "./AiSuggestionWhereUniqueInput";
import { AiSuggestionUpdateInput } from "./AiSuggestionUpdateInput";

export class AiSuggestionControllerBase {
  constructor(protected readonly service: AiSuggestionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiSuggestion })
  async createAiSuggestion(
    @common.Body() data: AiSuggestionCreateInput
  ): Promise<AiSuggestion> {
    return await this.service.createAiSuggestion({
      data: {
        ...data,

        entry: data.entry
          ? {
              connect: data.entry,
            }
          : undefined,

        reviewer: data.reviewer
          ? {
              connect: data.reviewer,
            }
          : undefined,

        root: data.root
          ? {
              connect: data.root,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        entry: {
          select: {
            id: true,
          },
        },

        examples: true,
        formType: true,
        id: true,
        reviewedAt: true,

        reviewer: {
          select: {
            id: true,
          },
        },

        root: {
          select: {
            id: true,
          },
        },

        status: true,
        suggestedDefinition: true,
        suggestedWord: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AiSuggestion] })
  @ApiNestedQuery(AiSuggestionFindManyArgs)
  async aiSuggestions(@common.Req() request: Request): Promise<AiSuggestion[]> {
    const args = plainToClass(AiSuggestionFindManyArgs, request.query);
    return this.service.aiSuggestions({
      ...args,
      select: {
        createdAt: true,

        entry: {
          select: {
            id: true,
          },
        },

        examples: true,
        formType: true,
        id: true,
        reviewedAt: true,

        reviewer: {
          select: {
            id: true,
          },
        },

        root: {
          select: {
            id: true,
          },
        },

        status: true,
        suggestedDefinition: true,
        suggestedWord: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiSuggestion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aiSuggestion(
    @common.Param() params: AiSuggestionWhereUniqueInput
  ): Promise<AiSuggestion | null> {
    const result = await this.service.aiSuggestion({
      where: params,
      select: {
        createdAt: true,

        entry: {
          select: {
            id: true,
          },
        },

        examples: true,
        formType: true,
        id: true,
        reviewedAt: true,

        reviewer: {
          select: {
            id: true,
          },
        },

        root: {
          select: {
            id: true,
          },
        },

        status: true,
        suggestedDefinition: true,
        suggestedWord: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiSuggestion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAiSuggestion(
    @common.Param() params: AiSuggestionWhereUniqueInput,
    @common.Body() data: AiSuggestionUpdateInput
  ): Promise<AiSuggestion | null> {
    try {
      return await this.service.updateAiSuggestion({
        where: params,
        data: {
          ...data,

          entry: data.entry
            ? {
                connect: data.entry,
              }
            : undefined,

          reviewer: data.reviewer
            ? {
                connect: data.reviewer,
              }
            : undefined,

          root: data.root
            ? {
                connect: data.root,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          entry: {
            select: {
              id: true,
            },
          },

          examples: true,
          formType: true,
          id: true,
          reviewedAt: true,

          reviewer: {
            select: {
              id: true,
            },
          },

          root: {
            select: {
              id: true,
            },
          },

          status: true,
          suggestedDefinition: true,
          suggestedWord: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiSuggestion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAiSuggestion(
    @common.Param() params: AiSuggestionWhereUniqueInput
  ): Promise<AiSuggestion | null> {
    try {
      return await this.service.deleteAiSuggestion({
        where: params,
        select: {
          createdAt: true,

          entry: {
            select: {
              id: true,
            },
          },

          examples: true,
          formType: true,
          id: true,
          reviewedAt: true,

          reviewer: {
            select: {
              id: true,
            },
          },

          root: {
            select: {
              id: true,
            },
          },

          status: true,
          suggestedDefinition: true,
          suggestedWord: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
