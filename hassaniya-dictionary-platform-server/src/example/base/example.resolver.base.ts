/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Example } from "./Example";
import { ExampleCountArgs } from "./ExampleCountArgs";
import { ExampleFindManyArgs } from "./ExampleFindManyArgs";
import { ExampleFindUniqueArgs } from "./ExampleFindUniqueArgs";
import { CreateExampleArgs } from "./CreateExampleArgs";
import { UpdateExampleArgs } from "./UpdateExampleArgs";
import { DeleteExampleArgs } from "./DeleteExampleArgs";
import { User } from "../../user/base/User";
import { DictionaryEntry } from "../../dictionaryEntry/base/DictionaryEntry";
import { ExampleService } from "../example.service";
@graphql.Resolver(() => Example)
export class ExampleResolverBase {
  constructor(protected readonly service: ExampleService) {}

  async _examplesMeta(
    @graphql.Args() args: ExampleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Example])
  async examples(
    @graphql.Args() args: ExampleFindManyArgs
  ): Promise<Example[]> {
    return this.service.examples(args);
  }

  @graphql.Query(() => Example, { nullable: true })
  async example(
    @graphql.Args() args: ExampleFindUniqueArgs
  ): Promise<Example | null> {
    const result = await this.service.example(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Example)
  async createExample(
    @graphql.Args() args: CreateExampleArgs
  ): Promise<Example> {
    return await this.service.createExample({
      ...args,
      data: {
        ...args.data,

        creator: args.data.creator
          ? {
              connect: args.data.creator,
            }
          : undefined,

        entry: {
          connect: args.data.entry,
        },
      },
    });
  }

  @graphql.Mutation(() => Example)
  async updateExample(
    @graphql.Args() args: UpdateExampleArgs
  ): Promise<Example | null> {
    try {
      return await this.service.updateExample({
        ...args,
        data: {
          ...args.data,

          creator: args.data.creator
            ? {
                connect: args.data.creator,
              }
            : undefined,

          entry: {
            connect: args.data.entry,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Example)
  async deleteExample(
    @graphql.Args() args: DeleteExampleArgs
  ): Promise<Example | null> {
    try {
      return await this.service.deleteExample(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "creator",
  })
  async getCreator(@graphql.Parent() parent: Example): Promise<User | null> {
    const result = await this.service.getCreator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => DictionaryEntry, {
    nullable: true,
    name: "entry",
  })
  async getEntry(
    @graphql.Parent() parent: Example
  ): Promise<DictionaryEntry | null> {
    const result = await this.service.getEntry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
