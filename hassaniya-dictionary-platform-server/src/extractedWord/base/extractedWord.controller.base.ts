/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExtractedWordService } from "../extractedWord.service";
import { ExtractedWordCreateInput } from "./ExtractedWordCreateInput";
import { ExtractedWord } from "./ExtractedWord";
import { ExtractedWordFindManyArgs } from "./ExtractedWordFindManyArgs";
import { ExtractedWordWhereUniqueInput } from "./ExtractedWordWhereUniqueInput";
import { ExtractedWordUpdateInput } from "./ExtractedWordUpdateInput";

export class ExtractedWordControllerBase {
  constructor(protected readonly service: ExtractedWordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExtractedWord })
  async createExtractedWord(
    @common.Body() data: ExtractedWordCreateInput
  ): Promise<ExtractedWord> {
    return await this.service.createExtractedWord({
      data: {
        ...data,

        document: {
          connect: data.document,
        },

        entry: data.entry
          ? {
              connect: data.entry,
            }
          : undefined,
      },
      select: {
        context: true,

        document: {
          select: {
            id: true,
          },
        },

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        isNew: true,
        isProcessed: true,
        word: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExtractedWord] })
  @ApiNestedQuery(ExtractedWordFindManyArgs)
  async extractedWords(
    @common.Req() request: Request
  ): Promise<ExtractedWord[]> {
    const args = plainToClass(ExtractedWordFindManyArgs, request.query);
    return this.service.extractedWords({
      ...args,
      select: {
        context: true,

        document: {
          select: {
            id: true,
          },
        },

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        isNew: true,
        isProcessed: true,
        word: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExtractedWord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async extractedWord(
    @common.Param() params: ExtractedWordWhereUniqueInput
  ): Promise<ExtractedWord | null> {
    const result = await this.service.extractedWord({
      where: params,
      select: {
        context: true,

        document: {
          select: {
            id: true,
          },
        },

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        isNew: true,
        isProcessed: true,
        word: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExtractedWord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExtractedWord(
    @common.Param() params: ExtractedWordWhereUniqueInput,
    @common.Body() data: ExtractedWordUpdateInput
  ): Promise<ExtractedWord | null> {
    try {
      return await this.service.updateExtractedWord({
        where: params,
        data: {
          ...data,

          document: {
            connect: data.document,
          },

          entry: data.entry
            ? {
                connect: data.entry,
              }
            : undefined,
        },
        select: {
          context: true,

          document: {
            select: {
              id: true,
            },
          },

          entry: {
            select: {
              id: true,
            },
          },

          id: true,
          isNew: true,
          isProcessed: true,
          word: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExtractedWord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExtractedWord(
    @common.Param() params: ExtractedWordWhereUniqueInput
  ): Promise<ExtractedWord | null> {
    try {
      return await this.service.deleteExtractedWord({
        where: params,
        select: {
          context: true,

          document: {
            select: {
              id: true,
            },
          },

          entry: {
            select: {
              id: true,
            },
          },

          id: true,
          isNew: true,
          isProcessed: true,
          word: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
