/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExtractedWord } from "./ExtractedWord";
import { ExtractedWordCountArgs } from "./ExtractedWordCountArgs";
import { ExtractedWordFindManyArgs } from "./ExtractedWordFindManyArgs";
import { ExtractedWordFindUniqueArgs } from "./ExtractedWordFindUniqueArgs";
import { CreateExtractedWordArgs } from "./CreateExtractedWordArgs";
import { UpdateExtractedWordArgs } from "./UpdateExtractedWordArgs";
import { DeleteExtractedWordArgs } from "./DeleteExtractedWordArgs";
import { Document } from "../../document/base/Document";
import { DictionaryEntry } from "../../dictionaryEntry/base/DictionaryEntry";
import { ExtractedWordService } from "../extractedWord.service";
@graphql.Resolver(() => ExtractedWord)
export class ExtractedWordResolverBase {
  constructor(protected readonly service: ExtractedWordService) {}

  async _extractedWordsMeta(
    @graphql.Args() args: ExtractedWordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExtractedWord])
  async extractedWords(
    @graphql.Args() args: ExtractedWordFindManyArgs
  ): Promise<ExtractedWord[]> {
    return this.service.extractedWords(args);
  }

  @graphql.Query(() => ExtractedWord, { nullable: true })
  async extractedWord(
    @graphql.Args() args: ExtractedWordFindUniqueArgs
  ): Promise<ExtractedWord | null> {
    const result = await this.service.extractedWord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExtractedWord)
  async createExtractedWord(
    @graphql.Args() args: CreateExtractedWordArgs
  ): Promise<ExtractedWord> {
    return await this.service.createExtractedWord({
      ...args,
      data: {
        ...args.data,

        document: {
          connect: args.data.document,
        },

        entry: args.data.entry
          ? {
              connect: args.data.entry,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ExtractedWord)
  async updateExtractedWord(
    @graphql.Args() args: UpdateExtractedWordArgs
  ): Promise<ExtractedWord | null> {
    try {
      return await this.service.updateExtractedWord({
        ...args,
        data: {
          ...args.data,

          document: {
            connect: args.data.document,
          },

          entry: args.data.entry
            ? {
                connect: args.data.entry,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExtractedWord)
  async deleteExtractedWord(
    @graphql.Args() args: DeleteExtractedWordArgs
  ): Promise<ExtractedWord | null> {
    try {
      return await this.service.deleteExtractedWord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  async getDocument(
    @graphql.Parent() parent: ExtractedWord
  ): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => DictionaryEntry, {
    nullable: true,
    name: "entry",
  })
  async getEntry(
    @graphql.Parent() parent: ExtractedWord
  ): Promise<DictionaryEntry | null> {
    const result = await this.service.getEntry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
