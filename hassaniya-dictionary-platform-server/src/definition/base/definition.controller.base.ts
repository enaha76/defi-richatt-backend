/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DefinitionService } from "../definition.service";
import { DefinitionCreateInput } from "./DefinitionCreateInput";
import { Definition } from "./Definition";
import { DefinitionFindManyArgs } from "./DefinitionFindManyArgs";
import { DefinitionWhereUniqueInput } from "./DefinitionWhereUniqueInput";
import { DefinitionUpdateInput } from "./DefinitionUpdateInput";

export class DefinitionControllerBase {
  constructor(protected readonly service: DefinitionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Definition })
  async createDefinition(
    @common.Body() data: DefinitionCreateInput
  ): Promise<Definition> {
    return await this.service.createDefinition({
      data: {
        ...data,

        creator: data.creator
          ? {
              connect: data.creator,
            }
          : undefined,

        entry: {
          connect: data.entry,
        },
      },
      select: {
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        definitionText: true,
        definitionType: true,

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        language: true,
        orderNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Definition] })
  @ApiNestedQuery(DefinitionFindManyArgs)
  async definitions(@common.Req() request: Request): Promise<Definition[]> {
    const args = plainToClass(DefinitionFindManyArgs, request.query);
    return this.service.definitions({
      ...args,
      select: {
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        definitionText: true,
        definitionType: true,

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        language: true,
        orderNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Definition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async definition(
    @common.Param() params: DefinitionWhereUniqueInput
  ): Promise<Definition | null> {
    const result = await this.service.definition({
      where: params,
      select: {
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        definitionText: true,
        definitionType: true,

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        language: true,
        orderNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Definition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDefinition(
    @common.Param() params: DefinitionWhereUniqueInput,
    @common.Body() data: DefinitionUpdateInput
  ): Promise<Definition | null> {
    try {
      return await this.service.updateDefinition({
        where: params,
        data: {
          ...data,

          creator: data.creator
            ? {
                connect: data.creator,
              }
            : undefined,

          entry: {
            connect: data.entry,
          },
        },
        select: {
          createdAt: true,

          creator: {
            select: {
              id: true,
            },
          },

          definitionText: true,
          definitionType: true,

          entry: {
            select: {
              id: true,
            },
          },

          id: true,
          language: true,
          orderNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Definition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDefinition(
    @common.Param() params: DefinitionWhereUniqueInput
  ): Promise<Definition | null> {
    try {
      return await this.service.deleteDefinition({
        where: params,
        select: {
          createdAt: true,

          creator: {
            select: {
              id: true,
            },
          },

          definitionText: true,
          definitionType: true,

          entry: {
            select: {
              id: true,
            },
          },

          id: true,
          language: true,
          orderNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
