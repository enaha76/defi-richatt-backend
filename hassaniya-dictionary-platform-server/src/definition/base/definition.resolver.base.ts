/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Definition } from "./Definition";
import { DefinitionCountArgs } from "./DefinitionCountArgs";
import { DefinitionFindManyArgs } from "./DefinitionFindManyArgs";
import { DefinitionFindUniqueArgs } from "./DefinitionFindUniqueArgs";
import { CreateDefinitionArgs } from "./CreateDefinitionArgs";
import { UpdateDefinitionArgs } from "./UpdateDefinitionArgs";
import { DeleteDefinitionArgs } from "./DeleteDefinitionArgs";
import { User } from "../../user/base/User";
import { DictionaryEntry } from "../../dictionaryEntry/base/DictionaryEntry";
import { DefinitionService } from "../definition.service";
@graphql.Resolver(() => Definition)
export class DefinitionResolverBase {
  constructor(protected readonly service: DefinitionService) {}

  async _definitionsMeta(
    @graphql.Args() args: DefinitionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Definition])
  async definitions(
    @graphql.Args() args: DefinitionFindManyArgs
  ): Promise<Definition[]> {
    return this.service.definitions(args);
  }

  @graphql.Query(() => Definition, { nullable: true })
  async definition(
    @graphql.Args() args: DefinitionFindUniqueArgs
  ): Promise<Definition | null> {
    const result = await this.service.definition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Definition)
  async createDefinition(
    @graphql.Args() args: CreateDefinitionArgs
  ): Promise<Definition> {
    return await this.service.createDefinition({
      ...args,
      data: {
        ...args.data,

        creator: args.data.creator
          ? {
              connect: args.data.creator,
            }
          : undefined,

        entry: {
          connect: args.data.entry,
        },
      },
    });
  }

  @graphql.Mutation(() => Definition)
  async updateDefinition(
    @graphql.Args() args: UpdateDefinitionArgs
  ): Promise<Definition | null> {
    try {
      return await this.service.updateDefinition({
        ...args,
        data: {
          ...args.data,

          creator: args.data.creator
            ? {
                connect: args.data.creator,
              }
            : undefined,

          entry: {
            connect: args.data.entry,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Definition)
  async deleteDefinition(
    @graphql.Args() args: DeleteDefinitionArgs
  ): Promise<Definition | null> {
    try {
      return await this.service.deleteDefinition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "creator",
  })
  async getCreator(@graphql.Parent() parent: Definition): Promise<User | null> {
    const result = await this.service.getCreator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => DictionaryEntry, {
    nullable: true,
    name: "entry",
  })
  async getEntry(
    @graphql.Parent() parent: Definition
  ): Promise<DictionaryEntry | null> {
    const result = await this.service.getEntry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
