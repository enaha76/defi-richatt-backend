/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AiSuggestionListRelationFilter } from "../../aiSuggestion/base/AiSuggestionListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { ChallengeRootWhereUniqueInput } from "../../challengeRoot/base/ChallengeRootWhereUniqueInput";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { DictionaryEntryListRelationFilter } from "../../dictionaryEntry/base/DictionaryEntryListRelationFilter";
import { IntFilter } from "../../util/IntFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { StringFilter } from "../../util/StringFilter";

@InputType()
class RootWhereInput {
  @ApiProperty({
    required: false,
    type: () => AiSuggestionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AiSuggestionListRelationFilter)
  @IsOptional()
  @Field(() => AiSuggestionListRelationFilter, {
    nullable: true,
  })
  aiSuggestions?: AiSuggestionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ChallengeRootWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ChallengeRootWhereUniqueInput)
  @IsOptional()
  @Field(() => ChallengeRootWhereUniqueInput, {
    nullable: true,
  })
  challenge?: ChallengeRootWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  classicalOrigin?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  creator?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => DictionaryEntryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DictionaryEntryListRelationFilter)
  @IsOptional()
  @Field(() => DictionaryEntryListRelationFilter, {
    nullable: true,
  })
  entries?: DictionaryEntryListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  id?: IntFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  isCompleted?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  notes?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  rootLetters?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  status?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  transliteration?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;
}

export { RootWhereInput as RootWhereInput };
