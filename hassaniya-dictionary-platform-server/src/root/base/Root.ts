/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AiSuggestion } from "../../aiSuggestion/base/AiSuggestion";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsInt,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { ChallengeRoot } from "../../challengeRoot/base/ChallengeRoot";
import { User } from "../../user/base/User";
import { DictionaryEntry } from "../../dictionaryEntry/base/DictionaryEntry";

@ObjectType()
class Root {
  @ApiProperty({
    required: false,
    type: () => [AiSuggestion],
  })
  @ValidateNested()
  @Type(() => AiSuggestion)
  @IsOptional()
  aiSuggestions?: Array<AiSuggestion>;

  @ApiProperty({
    required: false,
    type: () => ChallengeRoot,
  })
  @ValidateNested()
  @Type(() => ChallengeRoot)
  @IsOptional()
  challenge?: ChallengeRoot | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  classicalOrigin!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  creator?: User | null;

  @ApiProperty({
    required: false,
    type: () => [DictionaryEntry],
  })
  @ValidateNested()
  @Type(() => DictionaryEntry)
  @IsOptional()
  entries?: Array<DictionaryEntry>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isCompleted!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  notes!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  rootLetters!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  status!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  transliteration!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Root as Root };
