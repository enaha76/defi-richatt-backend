/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Root as PrismaRoot,
  AiSuggestion as PrismaAiSuggestion,
  DictionaryEntry as PrismaDictionaryEntry,
  ChallengeRoot as PrismaChallengeRoot,
  User as PrismaUser,
} from "@prisma/client";

export class RootServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RootCountArgs, "select">): Promise<number> {
    return this.prisma.root.count(args);
  }

  async roots(args: Prisma.RootFindManyArgs): Promise<PrismaRoot[]> {
    return this.prisma.root.findMany(args);
  }
  async root(args: Prisma.RootFindUniqueArgs): Promise<PrismaRoot | null> {
    return this.prisma.root.findUnique(args);
  }
  async createRoot(args: Prisma.RootCreateArgs): Promise<PrismaRoot> {
    return this.prisma.root.create(args);
  }
  async updateRoot(args: Prisma.RootUpdateArgs): Promise<PrismaRoot> {
    return this.prisma.root.update(args);
  }
  async deleteRoot(args: Prisma.RootDeleteArgs): Promise<PrismaRoot> {
    return this.prisma.root.delete(args);
  }

  async findAiSuggestions(
    parentId: number,
    args: Prisma.AiSuggestionFindManyArgs
  ): Promise<PrismaAiSuggestion[]> {
    return this.prisma.root
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .aiSuggestions(args);
  }

  async findEntries(
    parentId: number,
    args: Prisma.DictionaryEntryFindManyArgs
  ): Promise<PrismaDictionaryEntry[]> {
    return this.prisma.root
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .entries(args);
  }

  async getChallenge(parentId: number): Promise<PrismaChallengeRoot | null> {
    return this.prisma.root
      .findUnique({
        where: { id: parentId },
      })
      .challenge();
  }

  async getCreator(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.root
      .findUnique({
        where: { id: parentId },
      })
      .creator();
  }
}
