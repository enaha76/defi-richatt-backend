/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DictionaryEntry as PrismaDictionaryEntry,
  Activity as PrismaActivity,
  AiSuggestion as PrismaAiSuggestion,
  Comment as PrismaComment,
  Definition as PrismaDefinition,
  Example as PrismaExample,
  ExtractedWord as PrismaExtractedWord,
  Submission as PrismaSubmission,
  User as PrismaUser,
  Root as PrismaRoot,
} from "@prisma/client";

export class DictionaryEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DictionaryEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dictionaryEntry.count(args);
  }

  async dictionaryEntries(
    args: Prisma.DictionaryEntryFindManyArgs
  ): Promise<PrismaDictionaryEntry[]> {
    return this.prisma.dictionaryEntry.findMany(args);
  }
  async dictionaryEntry(
    args: Prisma.DictionaryEntryFindUniqueArgs
  ): Promise<PrismaDictionaryEntry | null> {
    return this.prisma.dictionaryEntry.findUnique(args);
  }
  async createDictionaryEntry(
    args: Prisma.DictionaryEntryCreateArgs
  ): Promise<PrismaDictionaryEntry> {
    return this.prisma.dictionaryEntry.create(args);
  }
  async updateDictionaryEntry(
    args: Prisma.DictionaryEntryUpdateArgs
  ): Promise<PrismaDictionaryEntry> {
    return this.prisma.dictionaryEntry.update(args);
  }
  async deleteDictionaryEntry(
    args: Prisma.DictionaryEntryDeleteArgs
  ): Promise<PrismaDictionaryEntry> {
    return this.prisma.dictionaryEntry.delete(args);
  }

  async findActivities(
    parentId: number,
    args: Prisma.ActivityFindManyArgs
  ): Promise<PrismaActivity[]> {
    return this.prisma.dictionaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activities(args);
  }

  async findAiSuggestions(
    parentId: number,
    args: Prisma.AiSuggestionFindManyArgs
  ): Promise<PrismaAiSuggestion[]> {
    return this.prisma.dictionaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .aiSuggestions(args);
  }

  async findComments(
    parentId: number,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.dictionaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findDefinitions(
    parentId: number,
    args: Prisma.DefinitionFindManyArgs
  ): Promise<PrismaDefinition[]> {
    return this.prisma.dictionaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .definitions(args);
  }

  async findExamples(
    parentId: number,
    args: Prisma.ExampleFindManyArgs
  ): Promise<PrismaExample[]> {
    return this.prisma.dictionaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .examples(args);
  }

  async findExtractedWords(
    parentId: number,
    args: Prisma.ExtractedWordFindManyArgs
  ): Promise<PrismaExtractedWord[]> {
    return this.prisma.dictionaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .extractedWords(args);
  }

  async findSubmissions(
    parentId: number,
    args: Prisma.SubmissionFindManyArgs
  ): Promise<PrismaSubmission[]> {
    return this.prisma.dictionaryEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .submissions(args);
  }

  async getApprovalUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.dictionaryEntry
      .findUnique({
        where: { id: parentId },
      })
      .approvalUser();
  }

  async getCreator(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.dictionaryEntry
      .findUnique({
        where: { id: parentId },
      })
      .creator();
  }

  async getLastEditor(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.dictionaryEntry
      .findUnique({
        where: { id: parentId },
      })
      .lastEditor();
  }

  async getRoot(parentId: number): Promise<PrismaRoot | null> {
    return this.prisma.dictionaryEntry
      .findUnique({
        where: { id: parentId },
      })
      .root();
  }
}
