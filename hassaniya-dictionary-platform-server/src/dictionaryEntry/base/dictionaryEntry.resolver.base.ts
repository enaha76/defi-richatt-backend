/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DictionaryEntry } from "./DictionaryEntry";
import { DictionaryEntryCountArgs } from "./DictionaryEntryCountArgs";
import { DictionaryEntryFindManyArgs } from "./DictionaryEntryFindManyArgs";
import { DictionaryEntryFindUniqueArgs } from "./DictionaryEntryFindUniqueArgs";
import { CreateDictionaryEntryArgs } from "./CreateDictionaryEntryArgs";
import { UpdateDictionaryEntryArgs } from "./UpdateDictionaryEntryArgs";
import { DeleteDictionaryEntryArgs } from "./DeleteDictionaryEntryArgs";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { AiSuggestionFindManyArgs } from "../../aiSuggestion/base/AiSuggestionFindManyArgs";
import { AiSuggestion } from "../../aiSuggestion/base/AiSuggestion";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { DefinitionFindManyArgs } from "../../definition/base/DefinitionFindManyArgs";
import { Definition } from "../../definition/base/Definition";
import { ExampleFindManyArgs } from "../../example/base/ExampleFindManyArgs";
import { Example } from "../../example/base/Example";
import { ExtractedWordFindManyArgs } from "../../extractedWord/base/ExtractedWordFindManyArgs";
import { ExtractedWord } from "../../extractedWord/base/ExtractedWord";
import { SubmissionFindManyArgs } from "../../submission/base/SubmissionFindManyArgs";
import { Submission } from "../../submission/base/Submission";
import { User } from "../../user/base/User";
import { Root } from "../../root/base/Root";
import { DictionaryEntryService } from "../dictionaryEntry.service";
@graphql.Resolver(() => DictionaryEntry)
export class DictionaryEntryResolverBase {
  constructor(protected readonly service: DictionaryEntryService) {}

  async _dictionaryEntriesMeta(
    @graphql.Args() args: DictionaryEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DictionaryEntry])
  async dictionaryEntries(
    @graphql.Args() args: DictionaryEntryFindManyArgs
  ): Promise<DictionaryEntry[]> {
    return this.service.dictionaryEntries(args);
  }

  @graphql.Query(() => DictionaryEntry, { nullable: true })
  async dictionaryEntry(
    @graphql.Args() args: DictionaryEntryFindUniqueArgs
  ): Promise<DictionaryEntry | null> {
    const result = await this.service.dictionaryEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DictionaryEntry)
  async createDictionaryEntry(
    @graphql.Args() args: CreateDictionaryEntryArgs
  ): Promise<DictionaryEntry> {
    return await this.service.createDictionaryEntry({
      ...args,
      data: {
        ...args.data,

        approvalUser: args.data.approvalUser
          ? {
              connect: args.data.approvalUser,
            }
          : undefined,

        creator: args.data.creator
          ? {
              connect: args.data.creator,
            }
          : undefined,

        lastEditor: args.data.lastEditor
          ? {
              connect: args.data.lastEditor,
            }
          : undefined,

        root: args.data.root
          ? {
              connect: args.data.root,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DictionaryEntry)
  async updateDictionaryEntry(
    @graphql.Args() args: UpdateDictionaryEntryArgs
  ): Promise<DictionaryEntry | null> {
    try {
      return await this.service.updateDictionaryEntry({
        ...args,
        data: {
          ...args.data,

          approvalUser: args.data.approvalUser
            ? {
                connect: args.data.approvalUser,
              }
            : undefined,

          creator: args.data.creator
            ? {
                connect: args.data.creator,
              }
            : undefined,

          lastEditor: args.data.lastEditor
            ? {
                connect: args.data.lastEditor,
              }
            : undefined,

          root: args.data.root
            ? {
                connect: args.data.root,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DictionaryEntry)
  async deleteDictionaryEntry(
    @graphql.Args() args: DeleteDictionaryEntryArgs
  ): Promise<DictionaryEntry | null> {
    try {
      return await this.service.deleteDictionaryEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Activity], { name: "activities" })
  async findActivities(
    @graphql.Parent() parent: DictionaryEntry,
    @graphql.Args() args: ActivityFindManyArgs
  ): Promise<Activity[]> {
    const results = await this.service.findActivities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AiSuggestion], { name: "aiSuggestions" })
  async findAiSuggestions(
    @graphql.Parent() parent: DictionaryEntry,
    @graphql.Args() args: AiSuggestionFindManyArgs
  ): Promise<AiSuggestion[]> {
    const results = await this.service.findAiSuggestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Comment], { name: "comments" })
  async findComments(
    @graphql.Parent() parent: DictionaryEntry,
    @graphql.Args() args: CommentFindManyArgs
  ): Promise<Comment[]> {
    const results = await this.service.findComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Definition], { name: "definitions" })
  async findDefinitions(
    @graphql.Parent() parent: DictionaryEntry,
    @graphql.Args() args: DefinitionFindManyArgs
  ): Promise<Definition[]> {
    const results = await this.service.findDefinitions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Example], { name: "examples" })
  async findExamples(
    @graphql.Parent() parent: DictionaryEntry,
    @graphql.Args() args: ExampleFindManyArgs
  ): Promise<Example[]> {
    const results = await this.service.findExamples(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ExtractedWord], { name: "extractedWords" })
  async findExtractedWords(
    @graphql.Parent() parent: DictionaryEntry,
    @graphql.Args() args: ExtractedWordFindManyArgs
  ): Promise<ExtractedWord[]> {
    const results = await this.service.findExtractedWords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Submission], { name: "submissions" })
  async findSubmissions(
    @graphql.Parent() parent: DictionaryEntry,
    @graphql.Args() args: SubmissionFindManyArgs
  ): Promise<Submission[]> {
    const results = await this.service.findSubmissions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "approvalUser",
  })
  async getApprovalUser(
    @graphql.Parent() parent: DictionaryEntry
  ): Promise<User | null> {
    const result = await this.service.getApprovalUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "creator",
  })
  async getCreator(
    @graphql.Parent() parent: DictionaryEntry
  ): Promise<User | null> {
    const result = await this.service.getCreator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "lastEditor",
  })
  async getLastEditor(
    @graphql.Parent() parent: DictionaryEntry
  ): Promise<User | null> {
    const result = await this.service.getLastEditor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Root, {
    nullable: true,
    name: "root",
  })
  async getRoot(
    @graphql.Parent() parent: DictionaryEntry
  ): Promise<Root | null> {
    const result = await this.service.getRoot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
