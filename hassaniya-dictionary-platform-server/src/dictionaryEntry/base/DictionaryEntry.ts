/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Activity } from "../../activity/base/Activity";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
  IsInt,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { AiSuggestion } from "../../aiSuggestion/base/AiSuggestion";
import { User } from "../../user/base/User";
import { Comment } from "../../comment/base/Comment";
import { Definition } from "../../definition/base/Definition";
import { Example } from "../../example/base/Example";
import { ExtractedWord } from "../../extractedWord/base/ExtractedWord";
import { Root } from "../../root/base/Root";
import { Submission } from "../../submission/base/Submission";

@ObjectType()
class DictionaryEntry {
  @ApiProperty({
    required: false,
    type: () => [Activity],
  })
  @ValidateNested()
  @Type(() => Activity)
  @IsOptional()
  activities?: Array<Activity>;

  @ApiProperty({
    required: false,
    type: () => [AiSuggestion],
  })
  @ValidateNested()
  @Type(() => AiSuggestion)
  @IsOptional()
  aiSuggestions?: Array<AiSuggestion>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  approvalDate!: Date | null;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  approvalUser?: User | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  audioFilePath!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Comment],
  })
  @ValidateNested()
  @Type(() => Comment)
  @IsOptional()
  comments?: Array<Comment>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  creator?: User | null;

  @ApiProperty({
    required: false,
    type: () => [Definition],
  })
  @ValidateNested()
  @Type(() => Definition)
  @IsOptional()
  definitions?: Array<Definition>;

  @ApiProperty({
    required: false,
    type: () => [Example],
  })
  @ValidateNested()
  @Type(() => Example)
  @IsOptional()
  examples?: Array<Example>;

  @ApiProperty({
    required: false,
    type: () => [ExtractedWord],
  })
  @ValidateNested()
  @Type(() => ExtractedWord)
  @IsOptional()
  extractedWords?: Array<ExtractedWord>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isChallengeWord!: boolean;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  lastEditor?: User | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  originType!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  partOfSpeech!: string | null;

  @ApiProperty({
    required: false,
    type: () => Root,
  })
  @ValidateNested()
  @Type(() => Root)
  @IsOptional()
  root?: Root | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  status!: string;

  @ApiProperty({
    required: false,
    type: () => [Submission],
  })
  @ValidateNested()
  @Type(() => Submission)
  @IsOptional()
  submissions?: Array<Submission>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  transliteration!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  verbForm!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  word!: string;
}

export { DictionaryEntry as DictionaryEntry };
