/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DictionaryEntryService } from "../dictionaryEntry.service";
import { DictionaryEntryCreateInput } from "./DictionaryEntryCreateInput";
import { DictionaryEntry } from "./DictionaryEntry";
import { DictionaryEntryFindManyArgs } from "./DictionaryEntryFindManyArgs";
import { DictionaryEntryWhereUniqueInput } from "./DictionaryEntryWhereUniqueInput";
import { DictionaryEntryUpdateInput } from "./DictionaryEntryUpdateInput";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";
import { AiSuggestionFindManyArgs } from "../../aiSuggestion/base/AiSuggestionFindManyArgs";
import { AiSuggestion } from "../../aiSuggestion/base/AiSuggestion";
import { AiSuggestionWhereUniqueInput } from "../../aiSuggestion/base/AiSuggestionWhereUniqueInput";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { CommentWhereUniqueInput } from "../../comment/base/CommentWhereUniqueInput";
import { DefinitionFindManyArgs } from "../../definition/base/DefinitionFindManyArgs";
import { Definition } from "../../definition/base/Definition";
import { DefinitionWhereUniqueInput } from "../../definition/base/DefinitionWhereUniqueInput";
import { ExampleFindManyArgs } from "../../example/base/ExampleFindManyArgs";
import { Example } from "../../example/base/Example";
import { ExampleWhereUniqueInput } from "../../example/base/ExampleWhereUniqueInput";
import { ExtractedWordFindManyArgs } from "../../extractedWord/base/ExtractedWordFindManyArgs";
import { ExtractedWord } from "../../extractedWord/base/ExtractedWord";
import { ExtractedWordWhereUniqueInput } from "../../extractedWord/base/ExtractedWordWhereUniqueInput";
import { SubmissionFindManyArgs } from "../../submission/base/SubmissionFindManyArgs";
import { Submission } from "../../submission/base/Submission";
import { SubmissionWhereUniqueInput } from "../../submission/base/SubmissionWhereUniqueInput";

export class DictionaryEntryControllerBase {
  constructor(protected readonly service: DictionaryEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DictionaryEntry })
  async createDictionaryEntry(
    @common.Body() data: DictionaryEntryCreateInput
  ): Promise<DictionaryEntry> {
    return await this.service.createDictionaryEntry({
      data: {
        ...data,

        approvalUser: data.approvalUser
          ? {
              connect: data.approvalUser,
            }
          : undefined,

        creator: data.creator
          ? {
              connect: data.creator,
            }
          : undefined,

        lastEditor: data.lastEditor
          ? {
              connect: data.lastEditor,
            }
          : undefined,

        root: data.root
          ? {
              connect: data.root,
            }
          : undefined,
      },
      select: {
        approvalDate: true,

        approvalUser: {
          select: {
            id: true,
          },
        },

        audioFilePath: true,
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        id: true,
        isChallengeWord: true,

        lastEditor: {
          select: {
            id: true,
          },
        },

        originType: true,
        partOfSpeech: true,

        root: {
          select: {
            id: true,
          },
        },

        status: true,
        transliteration: true,
        updatedAt: true,
        verbForm: true,
        word: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DictionaryEntry] })
  @ApiNestedQuery(DictionaryEntryFindManyArgs)
  async dictionaryEntries(
    @common.Req() request: Request
  ): Promise<DictionaryEntry[]> {
    const args = plainToClass(DictionaryEntryFindManyArgs, request.query);
    return this.service.dictionaryEntries({
      ...args,
      select: {
        approvalDate: true,

        approvalUser: {
          select: {
            id: true,
          },
        },

        audioFilePath: true,
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        id: true,
        isChallengeWord: true,

        lastEditor: {
          select: {
            id: true,
          },
        },

        originType: true,
        partOfSpeech: true,

        root: {
          select: {
            id: true,
          },
        },

        status: true,
        transliteration: true,
        updatedAt: true,
        verbForm: true,
        word: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DictionaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dictionaryEntry(
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<DictionaryEntry | null> {
    const result = await this.service.dictionaryEntry({
      where: params,
      select: {
        approvalDate: true,

        approvalUser: {
          select: {
            id: true,
          },
        },

        audioFilePath: true,
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        id: true,
        isChallengeWord: true,

        lastEditor: {
          select: {
            id: true,
          },
        },

        originType: true,
        partOfSpeech: true,

        root: {
          select: {
            id: true,
          },
        },

        status: true,
        transliteration: true,
        updatedAt: true,
        verbForm: true,
        word: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DictionaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDictionaryEntry(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() data: DictionaryEntryUpdateInput
  ): Promise<DictionaryEntry | null> {
    try {
      return await this.service.updateDictionaryEntry({
        where: params,
        data: {
          ...data,

          approvalUser: data.approvalUser
            ? {
                connect: data.approvalUser,
              }
            : undefined,

          creator: data.creator
            ? {
                connect: data.creator,
              }
            : undefined,

          lastEditor: data.lastEditor
            ? {
                connect: data.lastEditor,
              }
            : undefined,

          root: data.root
            ? {
                connect: data.root,
              }
            : undefined,
        },
        select: {
          approvalDate: true,

          approvalUser: {
            select: {
              id: true,
            },
          },

          audioFilePath: true,
          createdAt: true,

          creator: {
            select: {
              id: true,
            },
          },

          id: true,
          isChallengeWord: true,

          lastEditor: {
            select: {
              id: true,
            },
          },

          originType: true,
          partOfSpeech: true,

          root: {
            select: {
              id: true,
            },
          },

          status: true,
          transliteration: true,
          updatedAt: true,
          verbForm: true,
          word: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DictionaryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDictionaryEntry(
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<DictionaryEntry | null> {
    try {
      return await this.service.deleteDictionaryEntry({
        where: params,
        select: {
          approvalDate: true,

          approvalUser: {
            select: {
              id: true,
            },
          },

          audioFilePath: true,
          createdAt: true,

          creator: {
            select: {
              id: true,
            },
          },

          id: true,
          isChallengeWord: true,

          lastEditor: {
            select: {
              id: true,
            },
          },

          originType: true,
          partOfSpeech: true,

          root: {
            select: {
              id: true,
            },
          },

          status: true,
          transliteration: true,
          updatedAt: true,
          verbForm: true,
          word: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/activities")
  @ApiNestedQuery(ActivityFindManyArgs)
  async findActivities(
    @common.Req() request: Request,
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivities(params.id, {
      ...query,
      select: {
        activityDate: true,
        activityType: true,
        description: true,

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        pointsEarned: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activities")
  async connectActivities(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        connect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activities")
  async updateActivities(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        set: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activities")
  async disconnectActivities(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        disconnect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/aiSuggestions")
  @ApiNestedQuery(AiSuggestionFindManyArgs)
  async findAiSuggestions(
    @common.Req() request: Request,
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<AiSuggestion[]> {
    const query = plainToClass(AiSuggestionFindManyArgs, request.query);
    const results = await this.service.findAiSuggestions(params.id, {
      ...query,
      select: {
        createdAt: true,

        entry: {
          select: {
            id: true,
          },
        },

        examples: true,
        formType: true,
        id: true,
        reviewedAt: true,

        reviewer: {
          select: {
            id: true,
          },
        },

        root: {
          select: {
            id: true,
          },
        },

        status: true,
        suggestedDefinition: true,
        suggestedWord: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/aiSuggestions")
  async connectAiSuggestions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: AiSuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiSuggestions: {
        connect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/aiSuggestions")
  async updateAiSuggestions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: AiSuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiSuggestions: {
        set: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/aiSuggestions")
  async disconnectAiSuggestions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: AiSuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiSuggestions: {
        disconnect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/comments")
  @ApiNestedQuery(CommentFindManyArgs)
  async findComments(
    @common.Req() request: Request,
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<Comment[]> {
    const query = plainToClass(CommentFindManyArgs, request.query);
    const results = await this.service.findComments(params.id, {
      ...query,
      select: {
        commentText: true,
        createdAt: true,

        entry: {
          select: {
            id: true,
          },
        },

        id: true,

        parentComment: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comments")
  async connectComments(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        connect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comments")
  async updateComments(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        set: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comments")
  async disconnectComments(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        disconnect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/definitions")
  @ApiNestedQuery(DefinitionFindManyArgs)
  async findDefinitions(
    @common.Req() request: Request,
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<Definition[]> {
    const query = plainToClass(DefinitionFindManyArgs, request.query);
    const results = await this.service.findDefinitions(params.id, {
      ...query,
      select: {
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        definitionText: true,
        definitionType: true,

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        language: true,
        orderNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/definitions")
  async connectDefinitions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: DefinitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      definitions: {
        connect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/definitions")
  async updateDefinitions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: DefinitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      definitions: {
        set: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/definitions")
  async disconnectDefinitions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: DefinitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      definitions: {
        disconnect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/examples")
  @ApiNestedQuery(ExampleFindManyArgs)
  async findExamples(
    @common.Req() request: Request,
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<Example[]> {
    const query = plainToClass(ExampleFindManyArgs, request.query);
    const results = await this.service.findExamples(params.id, {
      ...query,
      select: {
        contextNotes: true,
        createdAt: true,

        creator: {
          select: {
            id: true,
          },
        },

        entry: {
          select: {
            id: true,
          },
        },

        exampleText: true,
        id: true,
        translation: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/examples")
  async connectExamples(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ExampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      examples: {
        connect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/examples")
  async updateExamples(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ExampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      examples: {
        set: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/examples")
  async disconnectExamples(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ExampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      examples: {
        disconnect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/extractedWords")
  @ApiNestedQuery(ExtractedWordFindManyArgs)
  async findExtractedWords(
    @common.Req() request: Request,
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<ExtractedWord[]> {
    const query = plainToClass(ExtractedWordFindManyArgs, request.query);
    const results = await this.service.findExtractedWords(params.id, {
      ...query,
      select: {
        context: true,

        document: {
          select: {
            id: true,
          },
        },

        entry: {
          select: {
            id: true,
          },
        },

        id: true,
        isNew: true,
        isProcessed: true,
        word: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/extractedWords")
  async connectExtractedWords(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ExtractedWordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      extractedWords: {
        connect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/extractedWords")
  async updateExtractedWords(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ExtractedWordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      extractedWords: {
        set: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/extractedWords")
  async disconnectExtractedWords(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: ExtractedWordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      extractedWords: {
        disconnect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/submissions")
  @ApiNestedQuery(SubmissionFindManyArgs)
  async findSubmissions(
    @common.Req() request: Request,
    @common.Param() params: DictionaryEntryWhereUniqueInput
  ): Promise<Submission[]> {
    const query = plainToClass(SubmissionFindManyArgs, request.query);
    const results = await this.service.findSubmissions(params.id, {
      ...query,
      select: {
        entry: {
          select: {
            id: true,
          },
        },

        feedback: true,
        id: true,
        notes: true,
        reviewedAt: true,

        reviewer: {
          select: {
            id: true,
          },
        },

        status: true,
        submissionType: true,
        submittedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/submissions")
  async connectSubmissions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        connect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/submissions")
  async updateSubmissions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        set: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/submissions")
  async disconnectSubmissions(
    @common.Param() params: DictionaryEntryWhereUniqueInput,
    @common.Body() body: SubmissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      submissions: {
        disconnect: body,
      },
    };
    await this.service.updateDictionaryEntry({
      where: params,
      data,
      select: { id: true },
    });
  }
}
