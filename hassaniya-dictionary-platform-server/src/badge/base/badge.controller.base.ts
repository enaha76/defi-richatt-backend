/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BadgeService } from "../badge.service";
import { BadgeCreateInput } from "./BadgeCreateInput";
import { Badge } from "./Badge";
import { BadgeFindManyArgs } from "./BadgeFindManyArgs";
import { BadgeWhereUniqueInput } from "./BadgeWhereUniqueInput";
import { BadgeUpdateInput } from "./BadgeUpdateInput";
import { UserBadgeFindManyArgs } from "../../userBadge/base/UserBadgeFindManyArgs";
import { UserBadge } from "../../userBadge/base/UserBadge";
import { UserBadgeWhereUniqueInput } from "../../userBadge/base/UserBadgeWhereUniqueInput";

export class BadgeControllerBase {
  constructor(protected readonly service: BadgeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Badge })
  async createBadge(@common.Body() data: BadgeCreateInput): Promise<Badge> {
    return await this.service.createBadge({
      data: data,
      select: {
        badgeName: true,
        description: true,
        iconPath: true,
        id: true,
        requiredPoints: true,
        requirementCount: true,
        requirementType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Badge] })
  @ApiNestedQuery(BadgeFindManyArgs)
  async badges(@common.Req() request: Request): Promise<Badge[]> {
    const args = plainToClass(BadgeFindManyArgs, request.query);
    return this.service.badges({
      ...args,
      select: {
        badgeName: true,
        description: true,
        iconPath: true,
        id: true,
        requiredPoints: true,
        requirementCount: true,
        requirementType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Badge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async badge(
    @common.Param() params: BadgeWhereUniqueInput
  ): Promise<Badge | null> {
    const result = await this.service.badge({
      where: params,
      select: {
        badgeName: true,
        description: true,
        iconPath: true,
        id: true,
        requiredPoints: true,
        requirementCount: true,
        requirementType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Badge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBadge(
    @common.Param() params: BadgeWhereUniqueInput,
    @common.Body() data: BadgeUpdateInput
  ): Promise<Badge | null> {
    try {
      return await this.service.updateBadge({
        where: params,
        data: data,
        select: {
          badgeName: true,
          description: true,
          iconPath: true,
          id: true,
          requiredPoints: true,
          requirementCount: true,
          requirementType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Badge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBadge(
    @common.Param() params: BadgeWhereUniqueInput
  ): Promise<Badge | null> {
    try {
      return await this.service.deleteBadge({
        where: params,
        select: {
          badgeName: true,
          description: true,
          iconPath: true,
          id: true,
          requiredPoints: true,
          requirementCount: true,
          requirementType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userBadges")
  @ApiNestedQuery(UserBadgeFindManyArgs)
  async findUserBadges(
    @common.Req() request: Request,
    @common.Param() params: BadgeWhereUniqueInput
  ): Promise<UserBadge[]> {
    const query = plainToClass(UserBadgeFindManyArgs, request.query);
    const results = await this.service.findUserBadges(params.id, {
      ...query,
      select: {
        badge: {
          select: {
            id: true,
          },
        },

        earnedAt: true,
        id: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userBadges")
  async connectUserBadges(
    @common.Param() params: BadgeWhereUniqueInput,
    @common.Body() body: UserBadgeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBadges: {
        connect: body,
      },
    };
    await this.service.updateBadge({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userBadges")
  async updateUserBadges(
    @common.Param() params: BadgeWhereUniqueInput,
    @common.Body() body: UserBadgeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBadges: {
        set: body,
      },
    };
    await this.service.updateBadge({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userBadges")
  async disconnectUserBadges(
    @common.Param() params: BadgeWhereUniqueInput,
    @common.Body() body: UserBadgeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userBadges: {
        disconnect: body,
      },
    };
    await this.service.updateBadge({
      where: params,
      data,
      select: { id: true },
    });
  }
}
