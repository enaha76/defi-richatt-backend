/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Badge as PrismaBadge,
  UserBadge as PrismaUserBadge,
} from "@prisma/client";

export class BadgeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BadgeCountArgs, "select">): Promise<number> {
    return this.prisma.badge.count(args);
  }

  async badges(args: Prisma.BadgeFindManyArgs): Promise<PrismaBadge[]> {
    return this.prisma.badge.findMany(args);
  }
  async badge(args: Prisma.BadgeFindUniqueArgs): Promise<PrismaBadge | null> {
    return this.prisma.badge.findUnique(args);
  }
  async createBadge(args: Prisma.BadgeCreateArgs): Promise<PrismaBadge> {
    return this.prisma.badge.create(args);
  }
  async updateBadge(args: Prisma.BadgeUpdateArgs): Promise<PrismaBadge> {
    return this.prisma.badge.update(args);
  }
  async deleteBadge(args: Prisma.BadgeDeleteArgs): Promise<PrismaBadge> {
    return this.prisma.badge.delete(args);
  }

  async findUserBadges(
    parentId: number,
    args: Prisma.UserBadgeFindManyArgs
  ): Promise<PrismaUserBadge[]> {
    return this.prisma.badge
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userBadges(args);
  }
}
